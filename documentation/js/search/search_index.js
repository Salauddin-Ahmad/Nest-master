var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.036,1,2.164]],["body/controllers/AppController.html",[0,1.76,1,3.677,2,1.458,3,0.378,4,0.328,5,0.328,6,3.897,7,0.456,8,0.028,9,1.002,10,3.26,11,3.897,12,0.378,13,0.019,14,3.411,15,1.966,16,0.024,17,0.024]],["title/modules/AppModule.html",[18,1.036,19,2.164]],["body/modules/AppModule.html",[1,3.014,2,1.228,3,0.22,4,0.191,5,0.191,7,0.506,8,0.029,9,0.583,10,3.015,11,2.268,12,0.22,13,0.011,16,0.017,17,0.017,18,1.442,19,4.254,20,1.145,21,1.238,22,1.464,23,1.464,24,1.238,25,2.488,26,1.464,27,2.268,28,2.268,29,2.268,30,3.015,31,3.015,32,3.305,33,3.305,34,2.767,35,2.767,36,2.118,37,1.464,38,1.344,39,2.698,40,2.727,41,2.488,42,2.698,43,2.698,44,2.698,45,2.698,46,2.698,47,2.268,48,1.605,49,1.145,50,1.534,51,2.698,52,2.698,53,1.985,54,1.145,55,2.268,56,2.698,57,1.774,58,2.698,59,0.539,60,3.903,61,1.464,62,2.698,63,2.118,64,2.698,65,2.698,66,2.698,67,2.698,68,1.774,69,2.698,70,2.698,71,2.698,72,1.985,73,1.985,74,2.698]],["title/injectables/AppService.html",[10,1.787,75,1.2]],["body/injectables/AppService.html",[3,0.365,4,0.316,5,0.316,7,0.365,8,0.028,9,0.968,10,2.972,12,0.365,13,0.019,16,0.023,17,0.023,73,3.294,75,1.997,76,2.43,77,3.765,78,0.758,79,2.514,80,6.166,81,0.895,82,4.478,83,2.055,84,1.723,85,2.055,86,4.478]],["title/controllers/AuthController.html",[0,1.036,87,2.164]],["body/controllers/AuthController.html",[0,1.427,2,1.427,3,0.369,4,0.321,5,0.321,7,0.45,8,0.028,9,0.981,12,0.369,13,0.019,14,3.337,15,1.924,16,0.023,17,0.023,87,3.629,88,3.813,89,2.697,90,4.536,91,3.084,92,3.813,93,4.536,94,3.337]],["title/modules/AuthModule.html",[18,1.036,30,1.787]],["body/modules/AuthModule.html",[2,1.518,3,0.299,4,0.259,5,0.259,7,0.467,8,0.028,9,0.793,12,0.299,13,0.015,16,0.02,17,0.02,18,1.696,20,2.047,21,1.683,22,1.989,23,1.989,24,1.683,25,2.926,26,2.926,30,3.38,34,2.402,36,2.618,37,1.989,38,1.826,41,2.618,87,3.544,91,3.278,92,3.082,95,3.082,96,3.082,97,3.082,98,3.667,99,3.171,100,3.667,101,3.082,102,2.698,103,2.698,104,3.082,105,3.667,106,3.082]],["title/injectables/AuthService.html",[75,1.2,91,1.64]],["body/injectables/AuthService.html",[3,0.269,4,0.233,5,0.233,7,0.366,8,0.028,9,0.713,12,0.269,13,0.014,15,1.399,16,0.019,17,0.019,50,1.766,57,2.168,59,0.898,63,1.79,68,3.361,72,2.427,75,1.639,76,1.79,78,0.559,79,2.063,81,1.022,83,2.063,84,2.01,85,2.063,91,2.238,99,2.954,107,2.773,108,2.952,109,4.615,110,5.113,111,2.439,112,2.773,113,2.783,114,3.299,115,2.238,116,1.907,117,1.414,118,3.299,119,3.299,120,4.495,121,2.169,122,3.299,123,2.168,124,2.773,125,2.773,126,2.168,127,2.773,128,2.773,129,2.773,130,1.79,131,2.427,132,4.495,133,2.168,134,3.299,135,3.299]],["title/classes/CreatePostDto.html",[13,0.014,136,1.787]],["body/classes/CreatePostDto.html",[3,0.13,4,0.113,5,0.113,7,0.309,8,0.029,12,0.268,13,0.014,16,0.011,17,0.011,59,1.147,63,2.271,78,0.27,81,1.05,84,1.756,117,1.652,136,1.787,137,0.732,138,3.957,139,1.048,140,1.115,141,3.484,142,2.423,143,2.423,144,3.633,145,2.769,146,2.165,147,2.752,148,2.165,149,3.08,150,3.775,151,1.652,152,3.195,153,1.944,154,3.414,155,1.594,156,1.594,157,2.601,158,2.601,159,1.594,160,1.594,161,2.062,162,2.186,163,1.594,164,3.8,165,2.186,166,1.411,167,2.601,168,1.594,169,1.594,170,1.594,171,2.601,172,2.113,173,3.195,174,3.8,175,2.498,176,3.195,177,1.594,178,1.594,179,2.498,180,3.519,181,2.601,182,2.186,183,1.594,184,1.594,185,1.594,186,1.594,187,1.913,188,3.195,189,2.796,190,1.34,191,3.195,192,3.195,193,1.913,194,1.913,195,1.913,196,2.186,197,2.186,198,2.186,199,2.186,200,1.594,201,3.08,202,3.195,203,3.195,204,3.195,205,1.594,206,1.594,207,2.601,208,2.601,209,1.594,210,1.594,211,3.8,212,1.594,213,1.594,214,1.594,215,3.08,216,3.303,217,0.794,218,1.173,219,2.601,220,1.594,221,2.601,222,1.913,223,2.489,224,1.594,225,2.951,226,3.303,227,2.186,228,1.173,229,1.173,230,1.173,231,2.601,232,0.794,233,3.195,234,2.769,235,0.627,236,1.173,237,1.173,238,1.594,239,1.913,240,1.594,241,1.594,242,1.34,243,1.34,244,1.594,245,1.594,246,1.34,247,1.594,248,1.34,249,1.34,250,1.594,251,1.913,252,2.186,253,1.594]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.014,161,1.787]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.356,4,0.309,5,0.309,7,0.356,8,0.028,12,0.356,13,0.022,16,0.023,17,0.023,59,0.873,78,0.74,81,0.873,84,1.696,137,2.004,140,1.826,151,1.373,153,1.826,161,2.926,222,3.968,223,3.207,232,2.174,235,2.119,236,3.968,251,4.305,254,3.671,255,4.367,256,4.367]],["title/classes/CreateTagDto.html",[13,0.014,257,2.423]],["body/classes/CreateTagDto.html",[3,0.229,4,0.198,5,0.198,7,0.327,8,0.028,12,0.229,13,0.017,16,0.017,17,0.017,59,1.082,78,0.475,81,1.082,84,1.927,116,2.296,117,1.771,137,1.288,140,1.359,142,3.449,146,3.081,147,3.558,151,1.703,153,0.95,154,3.349,172,2.127,187,2.954,188,4.301,189,2.954,190,2.359,191,4.301,192,4.301,193,2.954,194,2.954,195,2.954,196,3.375,197,3.375,198,3.375,199,3.375,215,3.449,216,3.764,217,1.397,222,2.954,223,2.788,225,3.363,226,3.764,227,3.375,228,2.065,229,2.065,230,2.065,232,1.397,239,2.065,242,3.375,243,2.359,246,2.359,257,2.954,258,4.734,259,2.359,260,2.806,261,2.806,262,2.806,263,2.806,264,2.954,265,2.806,266,2.806,267,2.806,268,2.806,269,2.806,270,2.806]],["title/classes/CreateUserDto.html",[13,0.014,271,1.787]],["body/classes/CreateUserDto.html",[3,0.257,4,0.223,5,0.223,7,0.257,8,0.028,12,0.257,13,0.018,16,0.018,17,0.018,59,1.076,68,3.715,78,0.534,81,1.076,84,1.921,117,1.37,123,3.281,137,1.446,140,1.475,151,1.694,193,3.204,194,3.204,195,3.204,223,3.202,225,2.863,226,3.962,228,2.318,229,2.318,230,2.318,232,1.569,239,3.204,271,2.363,272,4.752,273,2.318,274,3.672,275,3.672,276,3.151,277,3.151,278,3.151,279,3.151,280,3.151,281,3.151,282,3.151,283,4.356,284,4.356,285,4.356,286,4.356,287,4.914,288,4.356,289,5.385,290,1.847,291,4.356,292,4.356,293,4.356,294,3.151,295,4.356,296,5.385,297,3.151]],["title/classes/GetUserParamDto.html",[13,0.014,298,1.958]],["body/classes/GetUserParamDto.html",[3,0.322,4,0.28,5,0.28,7,0.455,8,0.028,12,0.322,13,0.023,16,0.022,17,0.022,50,1.992,59,1.118,78,0.67,81,0.791,117,1.594,121,2.586,137,1.815,140,1.716,151,1.244,152,3.326,154,3.014,172,1.555,216,3.729,217,1.97,218,2.911,225,3.332,232,1.97,290,2.372,298,3.014,299,4.261,300,3.332,301,3.326,302,3.956,303,3.956,304,4.261,305,3.326]],["title/controllers/MetaOptionsController.html",[0,1.036,306,2.164]],["body/controllers/MetaOptionsController.html",[0,1.166,2,1.166,3,0.302,4,0.262,5,0.262,7,0.441,8,0.029,9,0.801,12,0.302,13,0.015,15,1.572,16,0.021,17,0.021,53,2.726,54,2.061,57,2.436,59,0.74,78,0.628,79,2.229,81,0.74,83,1.7,85,1.7,89,2.204,108,2.699,111,2.01,115,1.845,116,1.572,117,1.166,130,2.01,151,1.166,153,1.948,161,3.326,235,1.909,237,2.726,306,3.193,307,3.115,308,4.858,309,2.889,310,3.706,311,3.706,312,2.436,313,3.121,314,3.115,315,3.115,316,1.845,317,3.706,318,3.115,319,3.706]],["title/modules/MetaOptionsModule.html",[18,1.036,31,1.787]],["body/modules/MetaOptionsModule.html",[2,1.568,3,0.314,4,0.272,5,0.272,7,0.493,8,0.028,9,0.834,12,0.314,13,0.016,16,0.021,17,0.021,18,1.738,20,1.635,21,1.769,22,2.091,23,2.091,24,1.769,25,2.997,26,2.091,31,3.361,36,2.705,37,2.091,38,1.919,41,2.091,48,2.292,49,1.635,53,3.667,54,1.635,235,1.515,306,3.631,313,3.361,314,3.241,315,3.241,320,3.241,321,3.241,322,3.855,323,3.855,324,1.769,325,2.292,326,3.855]],["title/injectables/MetaOptionsService.html",[75,1.2,313,1.787]],["body/injectables/MetaOptionsService.html",[3,0.284,4,0.246,5,0.246,7,0.477,8,0.029,9,0.754,12,0.284,13,0.014,15,1.478,16,0.02,17,0.02,49,1.478,54,1.478,59,0.932,75,1.7,76,1.891,78,0.59,79,2.14,81,0.932,83,1.599,85,1.599,108,2.618,111,2.531,115,2.322,116,1.978,117,1.467,130,1.891,133,2.29,153,1.18,161,3.268,235,2.206,237,2.564,313,2.531,316,1.735,324,1.599,325,2.072,327,4.42,328,2.929,329,4.664,330,3.485,331,3.691,332,3.485,333,4.664,334,4.664,335,3.485,336,2.564,337,1.599,338,2.929,339,3.485,340,3.485,341,3.485,342,3.485]],["title/entities/MetaoptionEntity.html",[324,1.511,343,1.294]],["body/entities/MetaoptionEntity.html",[3,0.259,4,0.225,5,0.225,7,0.357,8,0.028,12,0.259,13,0.013,16,0.019,17,0.019,54,2.486,59,1.171,61,1.725,78,0.538,81,1.133,84,1.379,121,2.127,140,1.484,151,1.784,153,1.92,166,2.378,179,3.553,235,2.303,251,3.69,252,3.684,290,1.859,324,2.011,337,1.459,343,1.249,344,2.673,345,5.016,346,5.016,347,4.216,348,3.179,349,3.297,350,3.179,351,2.09,352,2.881,353,3.179,354,2.933,355,2.673,356,4.383,357,4.383,358,3.179,359,3.179,360,4.216,361,3.179,362,3.179,363,2.881,364,3.684,365,3.684,366,3.179,367,2.673]],["title/classes/PatchPostDto.html",[13,0.014,368,2.164]],["body/classes/PatchPostDto.html",[3,0.327,4,0.284,5,0.284,7,0.459,8,0.028,12,0.327,13,0.021,16,0.022,17,0.022,59,0.803,78,0.68,81,0.803,121,2.598,136,2.179,137,1.843,139,2.64,140,1.733,151,1.263,153,1.733,172,1.578,187,2.955,215,3.765,217,2,223,3.044,232,2,290,2.171,304,4.303,309,2.389,368,3.364,369,4.303,370,4.303,371,5.118,372,4.017,373,4.017,374,3.377,375,2.64,376,4.017]],["title/classes/PatchUserDto.html",[13,0.014,377,2.164]],["body/classes/PatchUserDto.html",[3,0.378,4,0.328,5,0.328,7,0.456,8,0.028,12,0.378,13,0.019,16,0.024,17,0.024,137,2.127,271,2.515,273,3.411,309,2.757,370,4.703,374,3.897,377,3.677,378,3.897,379,5.594,380,3.897,381,3.897,382,3.411]],["title/controllers/PostController.html",[0,1.036,40,1.958]],["body/controllers/PostController.html",[0,0.768,2,0.768,3,0.199,4,0.173,5,0.173,7,0.417,8,0.029,9,0.528,12,0.199,13,0.01,14,1.796,15,1.036,16,0.015,17,0.015,35,1.806,40,2.157,59,0.865,78,0.414,79,1.664,81,0.957,83,1.986,84,1.361,85,1.12,89,1.452,108,2.902,115,2.155,116,1.836,117,1.361,136,3.013,148,2.384,151,1.361,153,2.104,172,2.242,189,3.524,217,1.216,264,1.796,312,2.384,316,1.216,368,3.149,375,2.384,383,2.053,384,2.442,385,4.328,386,3.627,387,3.627,388,2.442,389,3.627,390,4.791,391,3.149,392,4.791,393,3.627,394,4.791,395,4.791,396,2.442,397,2.442,398,3.627,399,2.442,400,3.627,401,2.442,402,3.627,403,2.669,404,2.442,405,3.627,406,3.049,407,3.627,408,2.442,409,2.442,410,3.627,411,2.053,412,3.049,413,2.053,414,3.638,415,3.638,416,2.053,417,2.053,418,2.442,419,2.442,420,2.053,421,2.053,422,2.053,423,2.053,424,2.442,425,2.442,426,3.049,427,3.627,428,3.049,429,2.053,430,2.442,431,2.442,432,2.442,433,2.442]],["title/entities/PostEntity.html",[343,1.294,354,1.787]],["body/entities/PostEntity.html",[3,0.172,4,0.149,5,0.149,7,0.322,8,0.028,12,0.172,13,0.009,16,0.014,17,0.014,54,0.895,59,1.254,61,1.144,63,3.242,78,0.357,81,1.162,84,1.856,117,1.715,121,1.679,140,1.099,141,2.912,143,3.532,144,4.012,145,3.328,146,2.602,147,2.602,148,2.602,149,2.912,150,3.328,151,1.797,166,2.751,179,2.134,201,3.532,233,4.585,235,0.829,290,1.377,316,1.05,324,2.04,325,1.254,337,0.968,343,1.276,349,2.602,351,3.585,352,3.97,354,1.762,355,1.773,363,3.677,364,2.729,365,2.729,367,2.729,375,1.386,434,1.773,435,3.959,436,3.738,437,2.109,438,3.731,439,3.731,440,2.729,441,2.109,442,2.109,443,3.247,444,3.247,445,2.109,446,2.109,447,3.738,448,3.247,449,2.109,450,3.247,451,2.109,452,2.109,453,2.729,454,2.389,455,2.109,456,2.109,457,2.109,458,3.247,459,2.109,460,2.109,461,2.109,462,2.109,463,2.109]],["title/modules/PostModule.html",[18,1.036,32,1.958]],["body/modules/PostModule.html",[2,1.376,3,0.258,4,0.224,5,0.224,7,0.498,8,0.029,9,0.685,12,0.258,13,0.013,16,0.019,17,0.019,18,1.575,20,1.855,21,1.454,22,1.72,23,1.72,24,1.454,25,2.717,26,2.717,31,3.177,32,3.805,34,3.186,35,3.186,36,2.373,37,1.72,38,1.578,40,2.978,41,2.373,48,1.885,49,1.344,54,1.855,55,2.665,101,2.665,102,2.332,103,2.332,235,1.719,324,2.007,325,1.885,354,1.72,413,2.665,423,2.665,464,2.665,465,3.17,466,2.665,467,3.17,468,3.17,469,3.17,470,2.665,471,3.17]],["title/injectables/PostsService.html",[35,1.64,75,1.2]],["body/injectables/PostsService.html",[3,0.208,4,0.181,5,0.181,7,0.459,8,0.029,9,0.554,12,0.208,13,0.011,15,1.888,16,0.016,17,0.016,35,1.871,49,1.086,50,1.749,54,1.086,59,0.889,75,1.37,76,1.389,78,0.434,79,2.042,81,0.889,83,1.724,84,1.4,85,1.724,94,3.274,104,2.152,108,2.717,111,2.038,112,2.152,113,2.587,115,2.216,116,1.888,117,1.4,124,2.152,130,2.414,133,1.683,136,2.961,141,3.606,143,3.606,153,1.958,162,2.152,235,1.006,309,2.915,312,1.683,316,1.275,318,2.152,324,1.175,325,1.523,331,3.802,336,1.884,337,1.175,338,2.152,354,1.389,375,1.683,403,3.606,470,2.152,472,2.152,473,3.741,474,3.757,475,4.45,476,4.45,477,2.561,478,2.561,479,2.561,480,3.757,481,2.561,482,2.152,483,2.561,484,2.561,485,2.561,486,2.561,487,2.152,488,2.561,489,2.561,490,3.757,491,3.158,492,3.158]],["title/entities/TagEntity.html",[343,1.294,493,2.164]],["body/entities/TagEntity.html",[3,0.209,4,0.181,5,0.181,7,0.209,8,0.028,12,0.209,13,0.011,16,0.016,17,0.016,59,1.253,61,1.393,63,3.257,78,0.435,81,1.18,84,1.888,116,1.89,117,1.82,121,1.89,140,1.274,142,3.278,146,2.929,147,2.929,151,1.857,166,2.663,172,1.751,179,3.59,290,1.596,337,1.178,343,1.009,347,3.746,349,2.929,351,3.435,352,3.946,360,3.746,363,3.59,436,4.126,438,4.018,439,4.018,440,3.164,453,4.126,454,3.611,493,2.474,494,2.158,495,4.456,496,4.456,497,4.456,498,2.567,499,4.456,500,2.567,501,2.567,502,2.567,503,2.567,504,2.567,505,2.567,506,2.567,507,2.567,508,2.567]],["title/controllers/TagsController.html",[0,1.036,509,2.164]],["body/controllers/TagsController.html",[0,1.518,2,1.518,3,0.393,4,0.341,5,0.341,7,0.393,8,0.027,9,1.044,12,0.393,13,0.02,16,0.024,17,0.024,89,2.871,149,3.551,509,3.767,510,4.058,511,4.827]],["title/modules/TagsModule.html",[18,1.036,33,1.958]],["body/modules/TagsModule.html",[2,1.684,3,0.351,4,0.305,5,0.305,7,0.496,8,0.029,9,0.933,12,0.351,13,0.018,16,0.023,17,0.023,18,1.831,20,1.829,33,3.183,41,2.34,48,2.565,49,1.829,81,0.862,429,3.626,493,3.518,509,3.825,512,4.313,513,4.313,514,4.313,515,4.313,516,3.626]],["title/entities/User.html",[50,1.294,343,1.294]],["body/entities/User.html",[3,0.262,4,0.227,5,0.227,7,0.262,8,0.028,12,0.262,13,0.013,16,0.019,17,0.019,50,1.737,59,1.226,61,1.746,63,2.948,68,3.318,78,0.545,81,1.138,84,1.931,121,2.141,123,3.318,140,1.496,151,1.791,166,2.948,274,3.713,275,3.713,290,1.875,337,1.477,343,1.265,349,3.318,351,3.318,352,3.867,363,3.867,438,4.329,439,4.329,454,3.251,517,2.705,518,5.884,519,3.218,520,3.218,521,3.218,522,3.218,523,3.218,524,3.218]],["title/injectables/UserService.html",[75,1.2,113,1.511]],["body/injectables/UserService.html",[3,0.168,4,0.146,5,0.146,7,0.427,8,0.029,9,0.447,12,0.168,13,0.016,15,0.877,16,0.014,17,0.014,49,0.877,50,2.129,57,1.359,59,0.951,72,2.352,75,1.166,76,1.122,78,0.35,79,1.467,81,0.879,83,1.794,84,1.582,85,1.794,91,2.612,99,2.102,108,2.769,109,3.699,111,1.735,113,1.467,115,2.191,116,1.866,117,1.384,121,1.866,123,2.102,125,1.738,126,1.359,127,1.738,128,1.738,129,1.738,130,1.735,131,1.521,133,2.57,172,0.812,175,2.57,271,2.581,274,3.237,275,3.237,290,2.134,298,2.992,300,3.127,309,1.229,316,1.029,331,3.127,336,1.521,337,0.949,382,1.521,391,1.359,403,2.352,473,3.287,487,2.688,516,1.738,525,1.738,526,3.198,527,2.688,528,3.198,529,3.198,530,2.688,531,3.91,532,3.198,533,2.068,534,3.91,535,2.068,536,3.198,537,3.198,538,2.068,539,2.068,540,2.068,541,3.287,542,2.068,543,4.4,544,3.198,545,2.068,546,3.198,547,1.738,548,1.738,549,2.068,550,1.738,551,2.068,552,2.068,553,2.068,554,3.198,555,3.198,556,3.198,557,2.068,558,2.068,559,2.068,560,2.068,561,2.068,562,2.068,563,2.068,564,3.91,565,2.068,566,2.068,567,3.198,568,3.91,569,2.068,570,2.068,571,2.068]],["title/controllers/UsersController.html",[0,1.036,572,2.164]],["body/controllers/UsersController.html",[0,0.534,2,0.534,3,0.138,4,0.12,5,0.12,7,0.396,8,0.029,9,0.367,12,0.138,13,0.007,15,0.72,16,0.012,17,0.012,50,1.351,59,0.864,78,0.287,79,1.577,81,0.547,83,1.577,85,2.396,89,1.009,94,1.249,108,2.6,111,0.921,113,1.809,115,1.362,116,1.672,117,1.36,121,2.062,126,2.591,130,0.921,148,1.116,151,0.861,153,1.464,154,1.627,165,2.3,166,1.484,172,1.549,175,3.195,182,2.89,217,0.845,264,1.249,271,2.637,287,1.427,290,2.062,298,2.571,300,3.324,305,1.427,312,2.842,316,0.845,377,3.602,382,2.013,391,1.798,411,2.3,412,3.314,414,2.3,415,2.3,416,1.427,417,1.427,420,1.427,421,1.427,422,1.427,426,1.427,428,1.427,447,3.314,482,2.3,491,2.3,492,1.427,530,2.3,541,3.635,547,1.427,548,1.427,572,1.798,573,1.427,574,3.437,575,3.437,576,1.697,577,1.697,578,1.697,579,1.697,580,3.943,581,1.697,582,1.697,583,1.697,584,4.324,585,1.697,586,3.437,587,3.943,588,1.427,589,1.427,590,3.437,591,1.697,592,1.697,593,1.697,594,1.697,595,1.697,596,1.697,597,1.697,598,1.697,599,1.697,600,1.697,601,1.697,602,1.697,603,3.437,604,1.697,605,1.697,606,3.943,607,2.3,608,1.697,609,1.697,610,1.697,611,1.697,612,1.697,613,1.697,614,1.697,615,1.697,616,1.697,617,1.697,618,1.697,619,1.697,620,1.697,621,1.697,622,1.697,623,1.427,624,1.697,625,2.736,626,1.697,627,1.697,628,1.697,629,1.697,630,1.697,631,1.697,632,1.697,633,1.697,634,2.736,635,1.697,636,1.697,637,1.697,638,1.697]],["title/modules/UsersModule.html",[18,1.036,34,1.64]],["body/modules/UsersModule.html",[2,1.48,3,0.288,4,0.25,5,0.25,7,0.492,8,0.029,9,0.764,12,0.288,13,0.015,16,0.02,17,0.02,18,1.665,20,1.996,21,1.62,22,1.916,23,1.916,24,1.62,25,2.872,26,2.872,30,2.553,34,3.074,36,2.553,37,1.916,38,1.758,41,1.916,47,2.969,48,2.799,49,1.498,50,1.849,99,3.093,102,2.598,103,2.598,113,3.005,343,1.388,550,2.969,572,3.479,589,2.969,639,2.969,640,2.969,641,2.969,642,3.531,643,3.531,644,3.531,645,3.531]],["title/coverage.html",[646,3.303]],["body/coverage.html",[0,1.791,1,1.905,5,0.205,6,2.437,8,0.028,10,1.573,13,0.024,16,0.017,17,0.017,24,1.33,35,1.443,40,1.724,50,1.139,54,1.743,59,0.579,75,1.998,77,2.437,87,1.905,88,2.437,91,1.443,107,2.437,113,1.33,136,1.573,138,2.133,139,2.701,153,0.981,161,1.573,235,2.04,236,2.133,254,2.437,257,2.133,258,2.437,259,2.437,271,1.573,272,2.437,273,3.023,298,1.724,299,2.437,300,1.905,301,2.437,306,1.905,307,2.437,313,1.573,324,1.33,327,2.437,328,2.437,343,2.04,344,2.437,354,1.573,368,1.905,369,2.437,377,1.905,378,2.437,383,2.437,391,1.905,434,2.437,472,2.437,493,1.905,494,2.437,509,1.905,510,2.437,517,2.437,525,2.437,527,2.437,572,1.905,573,2.437,646,2.133,647,2.437,648,2.899,649,2.899,650,6.602,651,6.084,652,5.482,653,4.109,654,2.437,655,2.899,656,4.109,657,2.899,658,2.899,659,2.899,660,2.899,661,2.899,662,2.899,663,2.899,664,2.899]],["title/dependencies.html",[21,1.817,665,2.314]],["body/dependencies.html",[8,0.029,9,0.929,13,0.022,16,0.023,17,0.023,21,1.971,49,1.822,217,2.139,218,3.16,232,2.139,337,1.971,380,3.611,381,3.611,588,3.611,666,5.809,667,4.295,668,4.295,669,4.295,670,4.295,671,4.295,672,4.295,673,4.295,674,4.295,675,4.295,676,4.295,677,4.295,678,4.295,679,4.295,680,4.295,681,4.295,682,4.295,683,4.295]],["title/miscellaneous/enumerations.html",[684,1.809,685,3.328]],["body/miscellaneous/enumerations.html",[8,0.028,16,0.023,17,0.023,78,0.727,138,3.16,139,3.818,144,3.928,153,1.807,175,3.509,176,4.488,180,4.488,201,3.928,202,4.488,203,4.488,204,4.488,234,4.488,607,5.488,684,2.823,685,3.611,686,5.339]],["title/miscellaneous/functions.html",[684,1.809,687,3.328]],["body/miscellaneous/functions.html",[8,0.025,16,0.025,17,0.025,24,2.86,78,0.857,654,4.253,684,3.325,687,4.253,688,5.059]],["title/index.html",[78,0.466,689,2.752,690,2.752]],["body/index.html",[4,0.169,8,0.027,16,0.015,17,0.015,38,2.65,73,3.145,106,2.011,126,1.572,131,3.916,154,2.82,172,0.94,173,2.011,248,4.767,249,2.011,331,1.572,406,2.011,623,2.011,646,1.76,647,3.003,691,2.392,692,2.392,693,4.275,694,3.572,695,2.392,696,2.392,697,2.392,698,2.392,699,3.572,700,2.392,701,4.742,702,2.392,703,5.671,704,2.392,705,5.516,706,2.392,707,2.392,708,2.392,709,3.572,710,2.392,711,3.572,712,2.392,713,4.275,714,2.392,715,3.572,716,2.392,717,2.392,718,2.392,719,2.392,720,2.392,721,4.742,722,5.323,723,2.392,724,3.572,725,2.392,726,2.392,727,2.392,728,3.572,729,4.742,730,2.392,731,3.572,732,2.392,733,2.392,734,3.572,735,5.323,736,4.742,737,2.392,738,3.572,739,2.392,740,2.392,741,2.392,742,2.392,743,4.742,744,2.392,745,2.392,746,2.392,747,2.392,748,3.572,749,2.392,750,2.392,751,2.392,752,2.392,753,2.392,754,3.572,755,2.392,756,2.392,757,2.392,758,3.572,759,2.392,760,2.392,761,3.986,762,3.572,763,2.392,764,2.392,765,2.392,766,2.392,767,2.392,768,2.392,769,2.392,770,2.392,771,3.572,772,2.392,773,2.011,774,2.392,775,2.392,776,4.275,777,2.392,778,2.392,779,2.392,780,2.392,781,2.392,782,3.572,783,2.392,784,2.392,785,2.392,786,2.392,787,3.572,788,2.392,789,2.392,790,2.392,791,3.572,792,3.572,793,2.392,794,2.392,795,2.392,796,2.392,797,2.392,798,2.392,799,2.392,800,2.392,801,2.392,802,2.392,803,2.011,804,2.392,805,2.392,806,2.392,807,2.392,808,2.392,809,2.392,810,2.011]],["title/modules.html",[20,1.904]],["body/modules.html",[8,0.024,16,0.024,17,0.024,19,3.007,20,1.941,30,2.482,31,2.482,32,2.721,33,2.721,34,2.278,761,5.349,773,3.846,811,6.363,812,6.363,813,6.468,814,4.576]],["title/overview.html",[815,3.774]],["body/overview.html",[2,0.994,8,0.028,10,2.713,16,0.019,17,0.019,18,0.994,19,4.304,20,1.34,21,1.45,22,1.715,23,1.715,24,1.45,25,1.715,26,1.715,27,2.657,28,2.657,29,2.657,30,3.175,31,3.175,32,3.771,33,2.973,34,3.158,35,3.043,36,2.368,37,1.715,38,1.574,61,1.715,76,1.715,91,2.986,95,2.657,96,2.657,97,2.657,113,2.752,137,1.45,313,2.713,320,2.657,321,2.657,464,2.657,466,2.657,639,2.657,640,2.657,641,2.657,815,2.657,816,4.365,817,3.16,818,3.16,819,3.16]],["title/properties.html",[140,1.34,665,2.314]],["body/properties.html",[8,0.028,16,0.025,17,0.025,140,1.689,172,1.96,803,4.193,810,4.193,820,4.988,821,4.988,822,4.988]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":821,"title":{},"body":{"properties.html":{}}}],["0.14.2",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["01t12:00:00z",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["01t12:00:00z'})@isiso8601()@isoptional",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1/4",{"_index":659,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["1024",{"_index":440,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["11.0.0",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":305,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":302,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["127.0.0.1",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["13.1.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":492,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["2.1.0",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":394,"title":{},"body":{"controllers/PostController.html":{}}}],["2023",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["25",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["255",{"_index":453,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["4",{"_index":817,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":818,"title":{},"body":{"overview.html":{}}}],["512",{"_index":458,"title":{},"body":{"entities/PostEntity.html":{}}}],["5432",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":816,"title":{},"body":{"overview.html":{}}}],["7",{"_index":819,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.16.3",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["95",{"_index":518,"title":{},"body":{"entities/User.html":{}}}],["actual",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["add",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PostsService.html":{}}}],["adjust",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["allowing",{"_index":749,"title":{},"body":{"index.html":{}}}],["already",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":797,"title":{},"body":{"index.html":{}}}],["apioperation",{"_index":414,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":389,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isjson",{"_index":267,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":260,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl()@maxlength(1024",{"_index":262,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({type",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":415,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":416,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":419,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":722,"title":{},"body":{"index.html":{}}}],["applications",{"_index":699,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["asdsasds34",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["assuming",{"_index":429,"title":{},"body":{"controllers/PostController.html":{},"modules/TagsModule.html":{}}}],["async",{"_index":473,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["authcontroller",{"_index":87,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":803,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":91,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":814,"title":{},"body":{"modules.html":{}}}],["avoid",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["await",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["aws",{"_index":738,"title":{},"body":{"index.html":{}}}],["backers",{"_index":798,"title":{},"body":{"index.html":{}}}],["based",{"_index":733,"title":{},"body":{"index.html":{}}}],["blog",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":790,"title":{},"body":{"index.html":{}}}],["body",{"_index":312,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":813,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":811,"title":{},"body":{"modules.html":{}}}],["building",{"_index":694,"title":{},"body":{"index.html":{}}}],["business",{"_index":528,"title":{},"body":{"injectables/UserService.html":{}}}],["cascade",{"_index":367,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{}}}],["cascade'})@joincolumn",{"_index":358,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["cases",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":764,"title":{},"body":{"index.html":{}}}],["characters",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["circular",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":748,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":732,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":320,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":321,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":464,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_exports",{"_index":466,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":465,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":467,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_usersmodule",{"_index":639,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":641,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":640,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":363,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["column({type",{"_index":351,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["come",{"_index":755,"title":{},"body":{"index.html":{}}}],["connet",{"_index":526,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log('hello",{"_index":339,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["console.log(`is",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createpostdto",{"_index":431,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(createuserdto",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostsdto",{"_index":433,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(patchuserdto",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(typeof",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor(authservice",{"_index":533,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(metaoptionrepository",{"_index":330,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{}}}],["constructor(userservice",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["content",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":317,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":418,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":511,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":770,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":646,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":309,"title":{},"body":{"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":318,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostsService.html":{}}}],["create(createpostdto",{"_index":478,"title":{},"body":{"injectables/PostsService.html":{}}}],["create(createpostmetaoptionsdto",{"_index":310,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["created",{"_index":395,"title":{},"body":{"controllers/PostController.html":{}}}],["createdat",{"_index":495,"title":{},"body":{"entities/TagEntity.html":{}}}],["createdatecolumn",{"_index":347,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/TagEntity.html":{}}}],["createddate",{"_index":345,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["createmetaoption",{"_index":329,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createmetaoption(createpostmetaoptionsdto",{"_index":334,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["createpostdto",{"_index":136,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createpostdto.metaoptions",{"_index":485,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostmetaoptionsdto",{"_index":161,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["createposty",{"_index":385,"title":{},"body":{"controllers/PostController.html":{}}}],["createposty(createpostdto",{"_index":388,"title":{},"body":{"controllers/PostController.html":{}}}],["creates",{"_index":390,"title":{},"body":{"controllers/PostController.html":{}}}],["createtagdto",{"_index":257,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":530,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":537,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":271,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["createusers",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuser",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["date",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["datetime",{"_index":462,"title":{},"body":{"entities/PostEntity.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":766,"title":{},"body":{"index.html":{}}}],["default",{"_index":447,"title":{},"body":{"entities/PostEntity.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["deletedat",{"_index":496,"title":{},"body":{"entities/TagEntity.html":{}}}],["deletedatecolumn",{"_index":499,"title":{},"body":{"entities/TagEntity.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["deploy",{"_index":721,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":737,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":728,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":747,"title":{},"body":{"index.html":{}}}],["description",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/TagEntity.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["details",{"_index":427,"title":{},"body":{"controllers/PostController.html":{}}}],["details.'})@apiresponse({status",{"_index":393,"title":{},"body":{"controllers/PostController.html":{}}}],["development",{"_index":706,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":777,"title":{},"body":{"index.html":{}}}],["discord",{"_index":763,"title":{},"body":{"index.html":{}}}],["dive",{"_index":765,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":647,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doe",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["draft",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/create",{"_index":316,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":547,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":417,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":716,"title":{},"body":{"index.html":{}}}],["each",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":444,"title":{},"body":{"entities/PostEntity.html":{}}}],["efficient",{"_index":695,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":727,"title":{},"body":{"index.html":{}}}],["eg",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["elsewhere",{"_index":430,"title":{},"body":{"controllers/PostController.html":{}}}],["email",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["endpoint",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoints",{"_index":422,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["ensure",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["enterprise",{"_index":781,"title":{},"body":{"index.html":{}}}],["entities",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":343,"title":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["entity('meta_options",{"_index":366,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["entity('tags",{"_index":508,"title":{},"body":{"entities/TagEntity.html":{}}}],["entity('user",{"_index":524,"title":{},"body":{"entities/User.html":{}}}],["entries",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{}}}],["enumerations",{"_index":685,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["existing",{"_index":407,"title":{},"body":{"controllers/PostController.html":{}}}],["existinguser",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["exists",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["experience",{"_index":768,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exporting",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":370,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":741,"title":{},"body":{"index.html":{}}}],["featured",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":435,"title":{},"body":{"entities/PostEntity.html":{}}}],["featuredimageurl",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/TagEntity.html":{}}}],["features",{"_index":751,"title":{},"body":{"index.html":{}}}],["fetch",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":743,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["final",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["find",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":531,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":540,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":532,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(userid",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["finduser",{"_index":474,"title":{},"body":{"injectables/PostsService.html":{}}}],["finduser(userid",{"_index":480,"title":{},"body":{"injectables/PostsService.html":{}}}],["firstname",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["focus",{"_index":750,"title":{},"body":{"index.html":{}}}],["follow",{"_index":784,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":693,"title":{},"body":{"index.html":{}}}],["full",{"_index":780,"title":{},"body":{"index.html":{}}}],["function",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":687,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":746,"title":{},"body":{"index.html":{}}}],["get('/:userid",{"_index":400,"title":{},"body":{"controllers/PostController.html":{}}}],["get([':id",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":80,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":386,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@param('userid",{"_index":424,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(userid",{"_index":399,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":689,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":298,"title":{"classes/GetUserParamDto.html":{}},"body":{"classes/GetUserParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusers",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":773,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grouping",{"_index":421,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["grow",{"_index":794,"title":{},"body":{"index.html":{}}}],["handle",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["hands",{"_index":767,"title":{},"body":{"index.html":{}}}],["handy",{"_index":756,"title":{},"body":{"index.html":{}}}],["headers",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":86,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":771,"title":{},"body":{"index.html":{}}}],["here",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["host",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["https://example.com/image.jpg",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://example.com/image.jpg'})@isstring()@isurl()@maxlength(1024",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":807,"title":{},"body":{"index.html":{}}}],["hyphens",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["id",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id/:optional",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["identifier",{"_index":648,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["importing",{"_index":645,"title":{},"body":{"modules/UsersModule.html":{}}}],["imports",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":78,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["information",{"_index":730,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":753,"title":{},"body":{"index.html":{}}}],["inject",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":75,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":336,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoptionentity",{"_index":338,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(postentity",{"_index":484,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["install",{"_index":745,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":704,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["integer",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":774,"title":{},"body":{"index.html":{}}}],["ip",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":304,"title":{},"body":{"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson()@isoptional",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail()@maxlength(95",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isjson",{"_index":255,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isobject",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["isstring",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@maxlength(95)@matches(/^(?=.*[a",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(95",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(95",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jane",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["job",{"_index":787,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":789,"title":{},"body":{"index.html":{}}}],["john",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":800,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":364,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{}}}],["json",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaoptionEntity.html":{}}}],["kamil",{"_index":804,"title":{},"body":{"index.html":{}}}],["key",{"_index":723,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":759,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":439,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["letter",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":810,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":792,"title":{},"body":{"index.html":{}}}],["limit",{"_index":541,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["limt",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":786,"title":{},"body":{"index.html":{}}}],["localhost:3000/posts/:userid",{"_index":402,"title":{},"body":{"controllers/PostController.html":{}}}],["login",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["long",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["looking",{"_index":731,"title":{},"body":{"index.html":{}}}],["lookup",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["loop",{"_index":783,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["makes",{"_index":739,"title":{},"body":{"index.html":{}}}],["managing",{"_index":752,"title":{},"body":{"index.html":{}}}],["mark",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["master",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["matches",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":735,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(1024",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(255",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(95",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["metadata",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":340,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoption.dto",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{}}}],["metaoption.dto.ts",{"_index":254,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metaoption.dto.ts:6",{"_index":256,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["metaoptionentity",{"_index":324,"title":{"entities/MetaoptionEntity.html":{}},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoptionrepository",{"_index":333,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["metaoptions",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{}}}],["metaoptions.post",{"_index":443,"title":{},"body":{"entities/PostEntity.html":{}}}],["metaoptionscontroller",{"_index":306,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["metaoptionsrepository",{"_index":476,"title":{},"body":{"injectables/PostsService.html":{}}}],["metaoptionsservice",{"_index":313,"title":{"injectables/MetaOptionsService.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"coverage.html":{},"overview.html":{}}}],["metavalue",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/MetaoptionEntity.html":{}}}],["method",{"_index":536,"title":{},"body":{"injectables/UserService.html":{}}}],["methods",{"_index":79,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minlength",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":684,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":791,"title":{},"body":{"index.html":{}}}],["mode",{"_index":709,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":729,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":463,"title":{},"body":{"entities/PostEntity.html":{}}}],["myśliwiec",{"_index":805,"title":{},"body":{"index.html":{}}}],["name",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["necessary",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["need",{"_index":778,"title":{},"body":{"index.html":{}}}],["needed",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}}}],["nest",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["nestframework",{"_index":809,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":380,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":391,"title":{},"body":{"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newuser",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":692,"title":{},"body":{"index.html":{}}}],["npm",{"_index":703,"title":{},"body":{"index.html":{}}}],["null",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["nullable",{"_index":352,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["number",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["numbers",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["object",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":788,"title":{},"body":{"index.html":{}}}],["official",{"_index":736,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":357,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["one",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["onetoone",{"_index":365,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{}}}],["onetoone(undefined",{"_index":355,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{}}}],["open",{"_index":793,"title":{},"body":{"index.html":{}}}],["operations",{"_index":529,"title":{},"body":{"injectables/UserService.html":{}}}],["option.entity",{"_index":325,"title":{},"body":{"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":344,"title":{},"body":{"entities/MetaoptionEntity.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":350,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["option.entity.ts:21",{"_index":353,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["option.entity.ts:24",{"_index":348,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["option.entity.ts:27",{"_index":361,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["option.entity.ts:33",{"_index":359,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["optional",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":308,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":323,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":307,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:15",{"_index":311,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["options.module.ts",{"_index":322,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.service",{"_index":315,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["options.service.ts",{"_index":328,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["options.service.ts:16",{"_index":335,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options.service.ts:8",{"_index":332,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["options/dtos/create",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":327,"title":{},"body":{"injectables/MetaOptionsService.html":{},"coverage.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":815,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":665,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":411,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["param('optional",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["parama",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto",{"_index":548,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":301,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["params.dto.ts:13",{"_index":303,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["parseintpipe",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":779,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":374,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":371,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":379,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["patch",{"_index":412,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":368,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":410,"title":{},"body":{"controllers/PostController.html":{}}}],["patchuserdto",{"_index":377,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["patchusers",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchusers(@body",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchusers(patchuserdto",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["pathces",{"_index":405,"title":{},"body":{"controllers/PostController.html":{}}}],["per",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":734,"title":{},"body":{"index.html":{}}}],["please",{"_index":762,"title":{},"body":{"index.html":{}}}],["port",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@isstring()@isnotempty()@maxlength(255)@matches(/^[a",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post'})@isstring()@isoptional",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.controller",{"_index":469,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":375,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post.dto.ts:103",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":373,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:113",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:132",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:45",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:82",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:86",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:95",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":470,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":356,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["post/post.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["post/post.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["post/providers/posts.service",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":40,"title":{"controllers/PostController.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postentity",{"_index":354,"title":{"entities/PostEntity.html":{}},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postgres",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["postmodule",{"_index":32,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepository",{"_index":475,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":384,"title":{},"body":{"controllers/PostController.html":{}}}],["postservice",{"_index":423,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["postsservice",{"_index":35,"title":{"injectables/PostsService.html":{}},"body":{"modules/AppModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":461,"title":{},"body":{"entities/PostEntity.html":{}}}],["posttitle",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{}}}],["posttype",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":460,"title":{},"body":{"entities/PostEntity.html":{}}}],["prefix",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":349,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["private",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["production",{"_index":711,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":691,"title":{},"body":{"index.html":{}}}],["project",{"_index":701,"title":{},"body":{"index.html":{}}}],["properties",{"_index":140,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"properties.html":{}}}],["provided",{"_index":392,"title":{},"body":{"controllers/PostController.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/meta",{"_index":314,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/posts.service",{"_index":413,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["providers/user.service",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{}}}],["query",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":760,"title":{},"body":{"index.html":{}}}],["read",{"_index":801,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":720,"title":{},"body":{"index.html":{}}}],["real",{"_index":775,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["replaced",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":331,"title":{},"body":{"injectables/MetaOptionsService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":742,"title":{},"body":{"index.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":754,"title":{},"body":{"index.html":{}}}],["response",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":85,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":705,"title":{},"body":{"index.html":{}}}],["runs",{"_index":726,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":516,"title":{},"body":{"modules/TagsModule.html":{},"injectables/UserService.html":{}}}],["sample",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":696,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["sent",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isnotempty()@isenum(posttype",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":697,"title":{},"body":{"index.html":{}}}],["service",{"_index":483,"title":{},"body":{"injectables/PostsService.html":{}}}],["setup",{"_index":702,"title":{},"body":{"index.html":{}}}],["side",{"_index":698,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":744,"title":{},"body":{"index.html":{}}}],["simulating",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["single",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["sponsors",{"_index":796,"title":{},"body":{"index.html":{}}}],["src/.../create",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":77,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:18",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"modules/PostModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/post/dtos/patch",{"_index":369,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/post.controller.ts",{"_index":383,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:18",{"_index":401,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:31",{"_index":397,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:46",{"_index":409,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":362,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["src/post/post.entity.ts",{"_index":434,"title":{},"body":{"entities/PostEntity.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:14",{"_index":442,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:21",{"_index":459,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:29",{"_index":449,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:37",{"_index":455,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:44",{"_index":456,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:50",{"_index":437,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:56",{"_index":452,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:63",{"_index":441,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:69",{"_index":451,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:71",{"_index":457,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.entity.ts:78",{"_index":446,"title":{},"body":{"entities/PostEntity.html":{}}}],["src/post/post.module.ts",{"_index":468,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/providers/posts.service.ts",{"_index":472,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/post/providers/posts.service.ts:10",{"_index":477,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/providers/posts.service.ts:28",{"_index":479,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/post/providers/posts.service.ts:43",{"_index":481,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/create",{"_index":258,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts",{"_index":510,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts",{"_index":494,"title":{},"body":{"entities/TagEntity.html":{},"coverage.html":{}}}],["src/tags/tags.entity.ts:13",{"_index":503,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:21",{"_index":504,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:29",{"_index":506,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:35",{"_index":501,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:41",{"_index":505,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:48",{"_index":502,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:51",{"_index":498,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:54",{"_index":507,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.entity.ts:57",{"_index":500,"title":{},"body":{"entities/TagEntity.html":{}}}],["src/tags/tags.module.ts",{"_index":512,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":299,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":378,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/user.service.ts",{"_index":525,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:14",{"_index":535,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:28",{"_index":538,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:45",{"_index":542,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:68",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity.ts",{"_index":517,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":520,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":522,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":519,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:31",{"_index":523,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":521,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:31",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:35",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":642,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":710,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":712,"title":{},"body":{"index.html":{}}}],["started",{"_index":690,"title":{"index.html":{}},"body":{}}],["starter",{"_index":700,"title":{},"body":{"index.html":{}}}],["statements",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":782,"title":{},"body":{"index.html":{}}}],["steps",{"_index":724,"title":{},"body":{"index.html":{}}}],["story",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":740,"title":{},"body":{"index.html":{}}}],["string",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/MetaoptionEntity.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["strings",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["successfully",{"_index":428,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":408,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":396,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":426,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":761,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":812,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":420,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["synchronize",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":527,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":264,"title":{},"body":{"classes/CreateTagDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["tag.dto.ts",{"_index":259,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:22",{"_index":266,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:35",{"_index":269,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:40",{"_index":261,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:45",{"_index":268,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":263,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tagentity",{"_index":493,"title":{"entities/TagEntity.html":{}},"body":{"entities/TagEntity.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tags",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":513,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.entity",{"_index":514,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":509,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["take",{"_index":725,"title":{},"body":{"index.html":{}}}],["technology",{"_index":270,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["technology'})@isstring()@minlength(3)@maxlength(255)@isnotempty",{"_index":265,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["test",{"_index":715,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":718,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":717,"title":{},"body":{"index.html":{}}}],["tests",{"_index":713,"title":{},"body":{"index.html":{}}}],["text",{"_index":436,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{}}}],["thanks",{"_index":795,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["this.metaoptionrepository.create",{"_index":341,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionrepository.save(metaoption",{"_index":342,"title":{},"body":{"injectables/MetaOptionsService.html":{}}}],["this.metaoptionsrepository.create(createpostdto.metaoptions",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsrepository.save(metaoptions",{"_index":488,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.metaoptionsservice.createmetaoption(createpostmetaoptionsdto",{"_index":319,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.postservice.finduser(userid",{"_index":425,"title":{},"body":{"controllers/PostController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuser",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid(id",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(userid",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":776,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":450,"title":{},"body":{"entities/PostEntity.html":{}}}],["title",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/PostEntity.html":{}}}],["title'})@isstring()@minlength(3)@maxlength(512)@isnotempty",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["token",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":802,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["true})@joincolumn",{"_index":445,"title":{},"body":{"entities/PostEntity.html":{}}}],["true})@minlength(3",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":808,"title":{},"body":{"index.html":{}}}],["type",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"controllers/MetaOptionsController.html":{},"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["typeof",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["typeorm",{"_index":337,"title":{},"body":{"injectables/MetaOptionsService.html":{},"entities/MetaoptionEntity.html":{},"entities/PostEntity.html":{},"injectables/PostsService.html":{},"entities/TagEntity.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoptionentity",{"_index":326,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([postentity",{"_index":471,"title":{},"body":{"modules/PostModule.html":{}}}],["typeormmodule.forfeature([tagentity",{"_index":515,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":644,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":381,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined",{"_index":448,"title":{},"body":{"entities/PostEntity.html":{}}}],["undefined})@isarray()@isoptional()@isstring({each",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":454,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["unit",{"_index":714,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":539,"title":{},"body":{"injectables/UserService.html":{}}}],["unlicensed",{"_index":822,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":376,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated'})@isint()@isnotempty",{"_index":372,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatedat",{"_index":497,"title":{},"body":{"entities/TagEntity.html":{}}}],["updatedate",{"_index":346,"title":{},"body":{"entities/MetaoptionEntity.html":{}}}],["updatedatecolumn",{"_index":360,"title":{},"body":{"entities/MetaoptionEntity.html":{},"entities/TagEntity.html":{}}}],["updatepost",{"_index":387,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":432,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostsdto",{"_index":404,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":406,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["uppercase",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["use",{"_index":482,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["usefactory",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":50,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user.dto",{"_index":382,"title":{},"body":{"classes/PatchUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:36",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":550,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["userid",{"_index":403,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["username",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":534,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":300,"title":{},"body":{"classes/GetUserParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users.controller",{"_index":643,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/1223",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/id?limit=10&page=1",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/user.entity",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["users?limit=10&page=2",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":572,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":113,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["validate",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["validatenested",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":438,"title":{},"body":{"entities/PostEntity.html":{},"entities/TagEntity.html":{},"entities/User.html":{}}}],["version",{"_index":820,"title":{},"body":{"properties.html":{}}}],["video",{"_index":769,"title":{},"body":{"index.html":{}}}],["visit",{"_index":758,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":772,"title":{},"body":{"index.html":{}}}],["void",{"_index":398,"title":{},"body":{"controllers/PostController.html":{}}}],["watch",{"_index":708,"title":{},"body":{"index.html":{}}}],["website",{"_index":806,"title":{},"body":{"index.html":{}}}],["whos",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["working",{"_index":757,"title":{},"body":{"index.html":{}}}],["x",{"_index":785,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":799,"title":{},"body":{"index.html":{}}}],["you're",{"_index":719,"title":{},"body":{"index.html":{}}}],["z0",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nAppModule -->\n\nPostsService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostController } from './post/post.controller';\nimport { PostModule } from './post/post.module';\nimport { PostsService } from './post/providers/posts.service';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\n// import { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    PostModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        // entities: [User],\n        autoLoadEntities: true,\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'asdsasds34@',\n        host: '127.0.0.1',\n        database: 'Nest-master',\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n  ],\n  controllers: [AppController, PostController],\n  providers: [AppService, PostsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello Nest!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  // Injecting AuthService\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService], // Exporting AuthService if needed in other modules\n  imports: [forwardRef(() => UsersModule)], // Add any necessary imports here\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UserService)) // Using forwardRef to avoid circular dependency\n    private readonly userService: UserService,\n  ) {}\n  public login(email: string, password: string, id: string): string {\n    //check user database\n    //login\n    //token\n    const user = this.userService.findOneById(id);\n    return 'sample token';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Content of the post', example: 'This is the content of the post'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image of the post', example: 'https://example.com/image.jpg'})@IsString()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values, 'post', 'page', 'story', 'series''})@IsNotEmpty()@IsEnum(PostType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the post is published', example: '2023-10-01T12:00:00Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens eg: my-url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values, 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as strings', example: undefined})@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is title of the blog post', example: 'This is a title'})@IsString()@MinLength(3)@MaxLength(512)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsObject,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\n\nexport enum PostType {\n  Post = 'post',\n  Page = 'page',\n  Story = 'story',\n  Series = 'series',\n}\n\nexport enum postStatus {\n  Draft = 'draft',\n  Scheduled = 'scheduled',\n  Review = 'review',\n  Published = 'published',\n}\n\nimport { CreatePostMetaOptionsDto } from 'src/meta-options/dtos/create-post-metaoption.dto';\n\n// MARK: CreatePostDto\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'This is title of the blog post',\n    example: 'This is a title',\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(512)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values, 'post', 'page', 'story', 'series'\",\n  })\n  @IsNotEmpty()\n  @IsEnum(PostType)\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug must be lowercase and can only contain letters, numbers, and hyphens eg: my-url',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values, 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'Content of the post',\n    example: 'This is the content of the post',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image of the post',\n    example: 'https://example.com/image.jpg',\n  })\n  @IsString()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the post is published',\n    example: '2023-10-01T12:00:00Z',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as strings',\n    example: ['nestjs', 'typescript'],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metavalue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example: '{\"sidebarEnabled\": true,}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto | null;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-post-metaoption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-post-metaoption.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The name of the tag', example: 'Technology'})@IsString()@MinLength(3)@MaxLength(255)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@MaxLength(255)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'Slug must be lowercase and can only contain letters, numbers, and hyphens eg: my-url'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/create-tag.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'The name of the tag',\n    example: 'Technology',\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(255)\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: \"For example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(255)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'Slug must be lowercase and can only contain letters, numbers, and hyphens eg: my-url',\n  })\n  slug: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  @MaxLength(1024)\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()@MaxLength(95)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(95)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(95)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MaxLength(95)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, one number, and be at least 8 characters long.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  MinLength,\n  MaxLength,\n  IsNotEmpty,\n  Matches,\n  IsOptional,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(95)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(95)\n  lastName?: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @MaxLength(95)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(95)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/, {\n    message:\n      'Password must contain at least one uppercase letter, one lowercase letter, one number, and be at least 8 characters long.',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDto.html":{"url":"classes/GetUserParamDto.html","title":"class - GetUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user by id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-params.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUserParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user by id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostMetaOptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaOptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\n\nimport { MetaOptionsService } from './providers/meta-options.service';\nimport { CreatePostMetaOptionsDto } from './dtos/create-post-metaoption.dto';\n\n@Controller('meta-options')\nexport class MetaOptionsController {\n  constructor(\n    /**\n     * Inject MetaoptionsService\n     */\n    private readonly metaOptionsService: MetaOptionsService,\n  ) {}\n  @Post()\n  public create(@Body() createPostMetaOptionsDto: CreatePostMetaOptionsDto) {\n    return this.metaOptionsService.createMetaoption(createPostMetaOptionsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaoptionEntity } from './meta-option.entity';\nimport { MetaOptionsService } from './providers/meta-options.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  imports: [TypeOrmModule.forFeature([MetaoptionEntity])],\n  providers: [MetaOptionsService],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionsService.html":{"url":"injectables/MetaOptionsService.html","title":"injectable - MetaOptionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-options.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createMetaoption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaoptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-options.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaoptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createMetaoption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaoption(createPostMetaoptionsDto: CreatePostMetaOptionsDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-options.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostMetaoptionsDto\n                                            \n                                                            CreatePostMetaOptionsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { MetaoptionEntity } from 'src/meta-options/meta-option.entity';\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreatePostMetaOptionsDto } from '../dtos/create-post-metaoption.dto';\n\n@Injectable()\nexport class MetaOptionsService {\n  constructor(\n    @InjectRepository(MetaoptionEntity)\n    private readonly metaoptionRepository: Repository,\n  ) {\n    console.log('hello');\n  }\n\n  public createMetaoption(createPostMetaoptionsDto: CreatePostMetaOptionsDto) {\n    const metaOption = this.metaoptionRepository.create(\n      createPostMetaoptionsDto,\n    );\n    return this.metaoptionRepository.save(metaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaoptionEntity.html":{"url":"entities/MetaoptionEntity.html","title":"entity - MetaoptionEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaoptionEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { PostEntity } from 'src/post/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('meta_options')\nexport class MetaoptionEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createdDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => PostEntity, (post) => post.metaOptions, {\n    onDelete: 'CASCADE',\n  })\n  @JoinColumn()\n  post: PostEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The ID of the post to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPosty\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPosty\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPosty(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post', description: 'Creates a new blog post with the provided details.'})@ApiResponse({status: 201, description: 'Post created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:18\n                        \n                    \n\n\n            \n                \n                         GEt localhost:3000/posts/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Pathces the post', description: 'Updates an existing blog post with the provided details.'})@ApiResponse({status: 201, description: 'Post created successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts') // Swagger tag for grouping endpoints\nexport class PostController {\n  constructor(private readonly postService: PostsService) {}\n\n  /**\n   *\n   *  GEt localhost:3000/posts/:userId\n   */\n\n  @Get('/:userId')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postService.findUser(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post',\n    description: 'Creates a new blog post with the provided details.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Post created successfully',\n  })\n  @Post()\n  public createPosty(\n    @Body() createPostDto: CreatePostDto, // Assuming CreatePostDto is defined elsewhere\n  ) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Pathces the post',\n    description: 'Updates an existing blog post with the provided details.',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'Post created successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PostEntity.html":{"url":"entities/PostEntity.html","title":"entity - PostEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PostEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaoptionEntity[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOptions => metaOptions.post, {cascade: true, eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:21\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { postStatus, PostType } from './dtos/create-post.dto';\nimport { MetaoptionEntity } from 'src/meta-options/meta-option.entity';\n\n@Entity()\nexport class PostEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum: PostType,\n    nullable: false,\n    default: PostType.Post,\n  })\n  postType: PostType;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: postStatus,\n    default: postStatus.Draft,\n  })\n  status: postStatus;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImage?: string;\n\n  @Column({\n    type: 'timestamp', // 'datetime' in mySQL\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  tags?: string[];\n\n  @OneToOne(() => MetaoptionEntity, (metaOptions) => metaOptions.post, {\n    cascade: true,\n    eager: true,\n  })\n  @JoinColumn()\n  metaOptions?: MetaoptionEntity[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nMetaOptionsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostModule->PostsService \n\n\n\n\n\nUsersModule \n\nUsersModule \n\nUsersModule  -->\n\nPostModule->UsersModule \n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PostsService\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { PostController } from './post.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PostEntity } from './post.entity';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaoptionEntity } from 'src/meta-options/meta-option.entity';\nimport { MetaOptionsModule } from 'src/meta-options/meta-options.module';\n\n@Module({\n  providers: [PostsService],\n  controllers: [PostController],\n  imports: [\n    UsersModule,\n    TypeOrmModule.forFeature([PostEntity, MetaoptionEntity]),\n    MetaOptionsModule,\n  ],\n  exports: [PostsService, UsersModule], // Exporting PostService if needed in other modules\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                findUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, metaOptionsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/post/providers/posts.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/posts.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUser(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/posts.service.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { Repository } from 'typeorm';\nimport { PostEntity } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaoptionEntity } from 'src/meta-options/meta-option.entity';\n\n@Injectable()\nexport class PostsService {\n  // Injecting UserService to use its methods\n\n  constructor(\n    /**\n     * Injecting the user service\n     */\n    private readonly userService: UserService,\n    /**\n     * Injecting the Post Repository\n     */\n    @InjectRepository(PostEntity)\n    private readonly postRepository: Repository,\n\n    @InjectRepository(MetaoptionEntity)\n    private readonly metaOptionsRepository: Repository,\n  ) {}\n\n  public async create(@Body() createPostDto: CreatePostDto) {\n    // create metaOptions\n    let metaOptions = createPostDto.metaOptions\n      ? this.metaOptionsRepository.create(createPostDto.metaOptions)\n      : null;\n\n    if (metaOptions) {\n      await this.metaOptionsRepository.save(metaOptions);\n    }\n\n    // create a post\n    //  Add metaoptions to the post\n    // return the post\n  }\n\n  public findUser(userId: string) {\n    const userID = this.userService.findOneById(userId);\n\n    return [\n      {\n        user: userID,\n        postTitle: 'Post 1',\n        content: 'Content of Post 1',\n      },\n      {\n        user: userID,\n        postTitle: 'Post 2',\n        content: 'Content of Post 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TagEntity.html":{"url":"entities/TagEntity.html","title":"entity - TagEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TagEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 255, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tags.entity.ts:54\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity('tags')\nexport class TagEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 255,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImageUrl?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deletedAt?: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('tags')\nexport class TagsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagEntity } from './tags.entity';\n\n@Module({\n  controllers: [TagsController],\n  imports: [TypeOrmModule.forFeature([TagEntity])], // Assuming TagEntity is defined in the same module\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 95, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 95, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 95, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity('user')\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 95,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 95,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 95,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connet user table and business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:14\n                            \n                        \n\n                \n                    \n                            The method to get all the users from the database\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:45\n                        \n                    \n\n\n            \n                \n                        find all users\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:68\n                        \n                    \n\n\n            \n                \n                        find a single user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; firstName: string; lastName: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GetUserParamDto } from './../dtos/get-users-params.dto';\nimport { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n/**\n * Class to connet user table and business operations\n */\n@Injectable()\nexport class UserService {\n  /**\n   * The method to get all the users from the database\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService)) // Using forwardRef to avoid circular dependency\n    private readonly authService: AuthService,\n    @InjectRepository(User)\n    private userRepository: Repository, // This should be replaced with the actual repository type\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(`Is Authenticated: ${isAuth}`);\n  }\n\n  public async createUser(createUserDto: CreateUserDto) {\n    // check if user already exists with the same email\n    const existingUser = await this.userRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    // handle exception\n\n    // create a new user\n    let newUser = this.userRepository.create(createUserDto);\n    newUser = await this.userRepository.save(newUser);\n    return newUser;\n  }\n\n  /**\n   * find all users\n   */\n  public findAll(\n    getUserParamDto: GetUserParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    // console.log(`Is Authenticated: ${isAuth}`);\n\n    return [\n      {\n        firstName: 'John',\n        lastName: 'Doe',\n      },\n      {\n        firstName: 'Jane',\n        lastName: 'Doe',\n      },\n    ];\n  }\n\n  /**\n   * find a single user by id\n   */\n  public findOneById(userId: string) {\n    // Simulating a user lookup\n    return {\n      id: userId,\n      firstName: 'John',\n      lastName: 'Doe',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUser: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUsers(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Patch,\n  Post,\n  // Get,\n  // Query,\n  // Headers,\n  // Req,\n  // Ip,\n  // ParseIntPipe,\n  // DefaultValuePipe,\n  // ValidationPipe,\n  // Param,\n} from '@nestjs/common';\n\n// import { Request } from 'express';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\n// import { GetUserParamDto } from './dtos/get-users-params.dto';\n// import { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n@Controller('users')\n// @ApiTags('Users') // Swagger tag for grouping endpoints\nexport class UsersController {\n  constructor(\n    private readonly userService: UserService, // Injecting UserService to use its methods\n  ) {}\n\n  @Post()\n  public createUsers(@Body() createUser: CreateUserDto) {\n    return this.userService.createUser(createUser);\n  }\n  @Patch()\n  public patchUsers(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n/****\n   *\n   ** Final Endpoint - /users/id?limit=10&page=1 \n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limt of pagination 10\n   * Parama id - optional, convert to integer, cannot have a default value\n   * USE CASES ==>\n   * Query limit - integer, default 10\n   * /users/ -> return all users with default pagination\n   * Query page - integer, default value 1\n\n   */\n\n//   @Get([':id', ':id/:optional'])\n//   @ApiOperation({\n//     summary: 'Get user by id or all users with pagination',\n//     description: 'Fetch a user by their ID or all users',\n//   })\n//   @ApiResponse({\n//     status: 200,\n//     description: 'users fetched successfully',\n//     type: GetUserParamDto, // Adjust this to the appropriate response DTO\n//   })\n//   @ApiQuery({\n//     name: 'limit',\n//     type: 'number',\n//     required: false,\n//     description: 'Number of entries to return per query',\n//     example: 10,\n//   })\n//   @ApiQuery({\n//     name: 'page',\n//     type: 'number',\n//     required: false,\n//     description: 'Position of the page to return',\n//     example: 1,\n//   })\n//   public getUsers(\n//     // @Param('id', ParseIntPipe) id?: number, // using ParseIntPipe to ensure id is an integer\n//     @Param() getUserParamDto: GetUserParamDto, // using GetUserParamDto to validate the id parameter\n//     @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n//     @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n//     // @Param('optional') optional?: number, // optional parameter\n//   ) {\n//     // console.log(typeof limit, typeof page);\n\n//     return this.userService.findAll(getUserParamDto, limit, page);\n//   }\n\n//   @Post()\n//   public createUsers(\n//     @Body(new ValidationPipe()) createUserDto: CreateUserDto, // using @Body() to get the body of the request\n//   ) {\n//     console.log(createUserDto instanceof CreateUserDto);\n\n//     return 'you sent a post request to /users';\n//   }\n//   @Patch()\n//   public patchUsers(\n//     @Body(new ValidationPipe()) patchUserDto: PatchUserDto, // using @Body() to get the body of the request\n//   ) {\n//     console.log(patchUserDto);\n//     return patchUserDto;\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { AuthModule } from './../auth/auth.module';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService], // Exporting UserService if needed in other modules\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])], // Importing TypeOrmModule with User entity\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-post-metaoption.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaoptionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-options.service.ts\n            \n            injectable\n            MetaOptionsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            PostEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tags/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.entity.ts\n            \n            entity\n            TagEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-params.dto.ts\n            \n            class\n            GetUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/graphql : ^13.1.0\n        \n            @nestjs/mapped-types : ^2.1.0\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            pg : ^8.16.3\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.25\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../create-post.dto.ts)\n                        \n                        \n                            PostType   (src/.../create-post.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/dtos/create-post.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 Draft\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 Scheduled\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 Review\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 Published\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 Post\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 Page\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 Story\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 Series\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_exports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nMetaOptionsModule->PostModule\n\n\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nPostsService \n\nPostsService \n\nPostsService  -->\n\nPostModule->PostsService \n\n\n\n\n\nUsersModule \n\nUsersModule \n\nUsersModule  -->\n\nPostModule->UsersModule \n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostModule -->\n\nPostsService->PostModule\n\n\n\nAppModule -->\n\nPostsService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionsService\n\nMetaOptionsService\n\nMetaOptionsModule -->\n\nMetaOptionsService->MetaOptionsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
